{
	
	"info": {
		"_postman_id": "e116c645-dadd-4c3e-a8da-a3d0ea3fdfe2",
		"name": "Assignment 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21700668"
	},
	"item": [
		{
			"name": "Add user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789') {\r",
							"       let randomString = \"\";\r",
							"    for (let i = 0; i < 10; i++)\r",
							"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return randomString;\r",
							"}\r",
							"//pm.variables.set('randomString', randomString());\r",
							"pm.environment.set('email', randomString()+\"@gmail.com\");\r",
							"\r",
							"function randomFirstName(dataSet = 'abcdefghijklmnopqrstuvwxyz') {\r",
							"       let randomFirstName = \"\";\r",
							"    for (let i = 0; i < 10; i++)\r",
							"        randomFirstName += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return randomFirstName;\r",
							"}\r",
							"//pm.variables.set('randomString', randomString());\r",
							"pm.environment.set('firstName', randomFirstName());\r",
							"\r",
							"function randomLastName(dataSet = 'abcdefghijklmnopqrstuvwxyz') {\r",
							"       let randomLastName = \"\";\r",
							"    for (let i = 0; i < 10; i++)\r",
							"        randomLastName += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return randomLastName;\r",
							"}\r",
							"//pm.variables.set('randomString', randomString());\r",
							"pm.environment.set('lastName', randomLastName());\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('token',jsonData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"myPassword\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://thinking-tester-contact-list.herokuapp.com/users",
					"protocol": "https",
					"host": [
						"thinking-tester-contact-list",
						"herokuapp",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch user with valid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test first name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var fname = pm.environment.get('firstName');\r",
							"    pm.expect(jsonData.firstName).to.eql(fname);\r",
							"});\r",
							"\r",
							"pm.test(\"Test last name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var lname = pm.environment.get('lastName');\r",
							"    pm.expect(jsonData.lastName).to.eql(lname);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Test email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var email = pm.environment.get('email');\r",
							"    pm.expect(jsonData.email).to.eql(email.toLowerCase());\r",
							"});\r",
							"\r",
							"pm.test(\"Test null and undefined\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.firstName).to.not.be.oneOf([null,undefined]);\r",
							"    pm.expect(jsonData.lastName).to.not.be.oneOf([null,undefined]);\r",
							"    pm.expect(jsonData.email).to.not.be.oneOf([null,undefined]);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
					"protocol": "https",
					"host": [
						"thinking-tester-contact-list",
						"herokuapp",
						"com"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch user with invalid token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789') {\r",
							"       let randomString = \"\";\r",
							"    for (let i = 0; i < 10; i++)\r",
							"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return randomString;\r",
							"}\r",
							"pm.variables.set('invalidToken', randomString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalidToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
					"protocol": "https",
					"host": [
						"thinking-tester-contact-list",
						"herokuapp",
						"com"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Contact added successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test first name\", function () {\r",
							"    \r",
							"    var fname = pm.environment.get('firstName');\r",
							"    pm.expect(jsonData.firstName).to.eql(fname);\r",
							"});\r",
							"\r",
							"pm.test(\"Test last name\", function () {\r",
							"    \r",
							"    var lname = pm.environment.get('lastName');\r",
							"    pm.expect(jsonData.lastName).to.eql(lname);\r",
							"});\r",
							"\r",
							"pm.test(\"Test email\", function () {\r",
							"    \r",
							"    var email = pm.environment.get('email');\r",
							"    pm.expect(jsonData.email).to.eql(email);\r",
							"});\r",
							"\r",
							"pm.test(\"Test city\", function () {\r",
							"    \r",
							"    var city = pm.environment.get('city');\r",
							"    pm.expect(jsonData.city).to.eql(city);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"birthdate\": \"1970-01-01\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"8005555555\",\r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"{{city}}\",\r\n    \"stateProvince\": \"KS\",\r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"USA\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
					"protocol": "https",
					"host": [
						"thinking-tester-contact-list",
						"herokuapp",
						"com"
					],
					"path": [
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete contact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successfully deleted\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Contact deleted\");\r",
							"});\r",
							"var jsonData ;\r",
							"var token = pm.environment.get('token');\r",
							"var contactid = pm.environment.get('contactid');\r",
							"console.log(contactid)\r",
							"pm.sendRequest({\r",
							"    url: \"https://thinking-tester-contact-list.herokuapp.com/contacts/\"+ contactid,\r",
							"    method: 'get',\r",
							"    header: {\r",
							"        'content-type': 'application/json',\r",
							"        'Authorization': 'Bearer '+ token\r",
							"    },\r",
							"    \r",
							"}, (err, res) => {\r",
							"    pm.test(\"fetch after delete - status - body\", function () {\r",
							"    pm.expect(res.toJSON().status).to.include(\"Not Found\");\r",
							"});\r",
							"pm.test(\"fetch after delete - status\", function () {\r",
							"    pm.expect(res.toJSON().code).to.be.eql(404);\r",
							"});\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = pm.environment.get('token');\r",
							"pm.sendRequest({\r",
							"    url: \"https://thinking-tester-contact-list.herokuapp.com/contacts\",\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'content-type': 'application/json',\r",
							"        'Authorization': 'Bearer '+ token\r",
							"    },\r",
							"    body: {\r",
							"\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"    \"firstName\": \"Test\",\r",
							"    \"lastName\": \"User\",\r",
							"    \"birthdate\": \"1970-01-01\",\r",
							"    \"email\": \"abcd@gmail.com\",\r",
							"    \"phone\": \"8005555555\",\r",
							"    \"street1\": \"1 Main St.\",\r",
							"    \"street2\": \"Apartment A\",\r",
							"    \"city\": \"delhi\",\r",
							"    \"stateProvince\": \"KS\",\r",
							"    \"postalCode\": \"12345\",\r",
							"    \"country\": \"USA\"\r",
							"})\r",
							"    }\r",
							"}, (err, res) => pm.environment.set(\"contactid\", res.json()._id)\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
					"protocol": "https",
					"host": [
						"thinking-tester-contact-list",
						"herokuapp",
						"com"
					],
					"path": [
						"contacts",
						"{{contactid}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "{{firstName}}",
			"value": "First name",
			"type": "string"
		},
		{
			"key": "{{lastName}}",
			"value": "Last name",
			"type": "string"
		}
	]
}